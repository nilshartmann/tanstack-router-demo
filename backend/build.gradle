plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'nh.recipify'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

tasks.named('test') {
	useJUnitPlatform()
}


def githubSha = System.getenv('GITHUB_SHA');
def shortSha = githubSha != null ? githubSha.substring(0, 7) : "local";
def dockerTag = "ghcr.io/nilshartmann/${project.name}:${shortSha}"
println(dockerTag)

tasks.named("bootBuildImage") {
	imageName = "ghcr.io/nilshartmann/${project.name}:${project.version}"
	tags = [dockerTag]

	// Conntect Package with GitHub Repository
	environment["BP_OCI_SOURCE"] = "https://github.com/nilshartmann/recipify"

	docker {
		publishRegistry {
			// Properties set in Github Action file
			username = getProperty('recipify_docker_username')
			password = getProperty('recipify_docker_secret')
		}
	}
}